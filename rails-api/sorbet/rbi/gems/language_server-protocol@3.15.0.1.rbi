# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `language_server-protocol` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module LanguageServer
end

module LanguageServer::Protocol
end

module LanguageServer::Protocol::Constant
end

module LanguageServer::Protocol::Constant::CodeActionKind
end

LanguageServer::Protocol::Constant::CodeActionKind::EMPTY = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::QUICK_FIX = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::REFACTOR = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::REFACTOR_EXTRACT = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::REFACTOR_INLINE = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::REFACTOR_REWRITE = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::SOURCE = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::CodeActionKind::SOURCE_ORGANIZE_IMPORTS = T.let(T.unsafe(nil), String)

module LanguageServer::Protocol::Constant::CompletionItemKind
end

LanguageServer::Protocol::Constant::CompletionItemKind::CLASS = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::COLOR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::CONSTANT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::CONSTRUCTOR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::ENUM = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::ENUM_MEMBER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::EVENT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::FIELD = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::FILE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::FOLDER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::FUNCTION = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::INTERFACE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::KEYWORD = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::METHOD = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::MODULE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::OPERATOR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::PROPERTY = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::REFERENCE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::SNIPPET = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::STRUCT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::TEXT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::TYPE_PARAMETER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::UNIT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::VALUE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionItemKind::VARIABLE = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::CompletionItemTag
end

LanguageServer::Protocol::Constant::CompletionItemTag::DEPRECATED = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::CompletionTriggerKind
end

LanguageServer::Protocol::Constant::CompletionTriggerKind::INVOKED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionTriggerKind::TRIGGER_CHARACTER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::CompletionTriggerKind::TRIGGER_FOR_INCOMPLETE_COMPLETIONS = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::DiagnosticSeverity
end

LanguageServer::Protocol::Constant::DiagnosticSeverity::ERROR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::DiagnosticSeverity::HINT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::DiagnosticSeverity::INFORMATION = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::DiagnosticSeverity::WARNING = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::DiagnosticTag
end

LanguageServer::Protocol::Constant::DiagnosticTag::DEPRECATED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::DiagnosticTag::UNNECESSARY = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::DocumentHighlightKind
end

LanguageServer::Protocol::Constant::DocumentHighlightKind::READ = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::DocumentHighlightKind::TEXT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::DocumentHighlightKind::WRITE = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::ErrorCodes
end

LanguageServer::Protocol::Constant::ErrorCodes::CONTENT_MODIFIED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::INTERNAL_ERROR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::INVALID_PARAMS = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::INVALID_REQUEST = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::METHOD_NOT_FOUND = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::PARSE_ERROR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::REQUEST_CANCELLED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::SERVER_ERROR_END = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::SERVER_ERROR_START = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::SERVER_NOT_INITIALIZED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::ErrorCodes::UNKNOWN_ERROR_CODE = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::FailureHandlingKind
end

LanguageServer::Protocol::Constant::FailureHandlingKind::ABORT = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::FailureHandlingKind::TEXT_ONLY_TRANSACTIONAL = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::FailureHandlingKind::TRANSACTIONAL = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::FailureHandlingKind::UNDO = T.let(T.unsafe(nil), String)

module LanguageServer::Protocol::Constant::FileChangeType
end

LanguageServer::Protocol::Constant::FileChangeType::CHANGED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::FileChangeType::CREATED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::FileChangeType::DELETED = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::InitializeError
end

LanguageServer::Protocol::Constant::InitializeError::UNKNOWN_PROTOCOL_VERSION = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::InsertTextFormat
end

LanguageServer::Protocol::Constant::InsertTextFormat::PLAIN_TEXT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::InsertTextFormat::SNIPPET = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::MarkupKind
end

LanguageServer::Protocol::Constant::MarkupKind::MARKDOWN = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::MarkupKind::PLAIN_TEXT = T.let(T.unsafe(nil), String)

module LanguageServer::Protocol::Constant::MessageType
end

LanguageServer::Protocol::Constant::MessageType::ERROR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::MessageType::INFO = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::MessageType::LOG = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::MessageType::WARNING = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::ResourceOperationKind
end

LanguageServer::Protocol::Constant::ResourceOperationKind::CREATE = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::ResourceOperationKind::DELETE = T.let(T.unsafe(nil), String)

LanguageServer::Protocol::Constant::ResourceOperationKind::RENAME = T.let(T.unsafe(nil), String)

module LanguageServer::Protocol::Constant::SignatureHelpTriggerKind
end

LanguageServer::Protocol::Constant::SignatureHelpTriggerKind::CONTENT_CHANGE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SignatureHelpTriggerKind::INVOKED = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SignatureHelpTriggerKind::TRIGGER_CHARACTER = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::SymbolKind
end

LanguageServer::Protocol::Constant::SymbolKind::ARRAY = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::BOOLEAN = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::CLASS = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::CONSTANT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::CONSTRUCTOR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::ENUM = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::ENUM_MEMBER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::EVENT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::FIELD = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::FILE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::FUNCTION = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::INTERFACE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::KEY = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::METHOD = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::MODULE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::NAMESPACE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::NULL = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::NUMBER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::OBJECT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::OPERATOR = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::PACKAGE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::PROPERTY = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::STRING = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::STRUCT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::TYPE_PARAMETER = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::SymbolKind::VARIABLE = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::TextDocumentSaveReason
end

LanguageServer::Protocol::Constant::TextDocumentSaveReason::AFTER_DELAY = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::TextDocumentSaveReason::FOCUS_OUT = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::TextDocumentSaveReason::MANUAL = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::TextDocumentSyncKind
end

LanguageServer::Protocol::Constant::TextDocumentSyncKind::FULL = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::TextDocumentSyncKind::INCREMENTAL = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::TextDocumentSyncKind::NONE = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Constant::WatchKind
end

LanguageServer::Protocol::Constant::WatchKind::CHANGE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::WatchKind::CREATE = T.let(T.unsafe(nil), Integer)

LanguageServer::Protocol::Constant::WatchKind::DELETE = T.let(T.unsafe(nil), Integer)

module LanguageServer::Protocol::Interface
end

class LanguageServer::Protocol::Interface::ApplyWorkspaceEditParams
  def initialize(edit:, label: T.unsafe(nil)); end

  def attributes; end
  def edit; end
  def label; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ApplyWorkspaceEditResponse
  def initialize(applied:, failure_reason: T.unsafe(nil)); end

  def applied; end
  def attributes; end
  def failure_reason; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CancelParams
  def initialize(id:); end

  def attributes; end
  def id; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ClientCapabilities
  def initialize(workspace: T.unsafe(nil), text_document: T.unsafe(nil), window: T.unsafe(nil), experimental: T.unsafe(nil)); end

  def attributes; end
  def experimental; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
  def window; end
  def workspace; end
end

class LanguageServer::Protocol::Interface::CodeAction
  def initialize(title:, kind: T.unsafe(nil), diagnostics: T.unsafe(nil), is_preferred: T.unsafe(nil), edit: T.unsafe(nil), command: T.unsafe(nil)); end

  def attributes; end
  def command; end
  def diagnostics; end
  def edit; end
  def is_preferred; end
  def kind; end
  def title; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), code_action_literal_support: T.unsafe(nil), is_preferred_support: T.unsafe(nil)); end

  def attributes; end
  def code_action_literal_support; end
  def dynamic_registration; end
  def is_preferred_support; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionContext
  def initialize(diagnostics:, only: T.unsafe(nil)); end

  def attributes; end
  def diagnostics; end
  def only; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil), code_action_kinds: T.unsafe(nil)); end

  def attributes; end
  def code_action_kinds; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, range:, context:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def context; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionRegistrationOptions < ::LanguageServer::Protocol::Interface::CodeActionOptions
  def initialize(work_done_progress: T.unsafe(nil), code_action_kinds: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLens
  def initialize(range:, command: T.unsafe(nil), data: T.unsafe(nil)); end

  def attributes; end
  def command; end
  def data; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLensClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLensOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def attributes; end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLensParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLensRegistrationOptions < ::LanguageServer::Protocol::Interface::CodeLensOptions
  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Color
  def initialize(red:, green:, blue:, alpha:); end

  def alpha; end
  def attributes; end
  def blue; end
  def green; end
  def red; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ColorInformation
  def initialize(range:, color:); end

  def attributes; end
  def color; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ColorPresentation
  def initialize(label:, text_edit: T.unsafe(nil), additional_text_edits: T.unsafe(nil)); end

  def additional_text_edits; end
  def attributes; end
  def label; end
  def text_edit; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ColorPresentationParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, color:, range:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def color; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Command
  def initialize(title:, command:, arguments: T.unsafe(nil)); end

  def arguments; end
  def attributes; end
  def command; end
  def title; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), completion_item: T.unsafe(nil), completion_item_kind: T.unsafe(nil), context_support: T.unsafe(nil)); end

  def attributes; end
  def completion_item; end
  def completion_item_kind; end
  def context_support; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionContext
  def initialize(trigger_kind:, trigger_character: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def trigger_character; end
  def trigger_kind; end
end

class LanguageServer::Protocol::Interface::CompletionItem
  def initialize(label:, kind: T.unsafe(nil), tags: T.unsafe(nil), detail: T.unsafe(nil), documentation: T.unsafe(nil), deprecated: T.unsafe(nil), preselect: T.unsafe(nil), sort_text: T.unsafe(nil), filter_text: T.unsafe(nil), insert_text: T.unsafe(nil), insert_text_format: T.unsafe(nil), text_edit: T.unsafe(nil), additional_text_edits: T.unsafe(nil), commit_characters: T.unsafe(nil), command: T.unsafe(nil), data: T.unsafe(nil)); end

  def additional_text_edits; end
  def attributes; end
  def command; end
  def commit_characters; end
  def data; end
  def deprecated; end
  def detail; end
  def documentation; end
  def filter_text; end
  def insert_text; end
  def insert_text_format; end
  def kind; end
  def label; end
  def preselect; end
  def sort_text; end
  def tags; end
  def text_edit; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionList
  def initialize(is_incomplete:, items:); end

  def attributes; end
  def is_incomplete; end
  def items; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), all_commit_characters: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def all_commit_characters; end
  def attributes; end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
  def trigger_characters; end
end

class LanguageServer::Protocol::Interface::CompletionParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil), context: T.unsafe(nil)); end

  def attributes; end
  def context; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionRegistrationOptions < ::LanguageServer::Protocol::Interface::CompletionOptions
  def initialize(work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), all_commit_characters: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ConfigurationItem
  def initialize(scope_uri: T.unsafe(nil), section: T.unsafe(nil)); end

  def attributes; end
  def scope_uri; end
  def section; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ConfigurationParams
  def initialize(items:); end

  def attributes; end
  def items; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CreateFile
  def initialize(kind:, uri:, options: T.unsafe(nil)); end

  def attributes; end
  def kind; end
  def options; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end

class LanguageServer::Protocol::Interface::CreateFileOptions
  def initialize(overwrite: T.unsafe(nil), ignore_if_exists: T.unsafe(nil)); end

  def attributes; end
  def ignore_if_exists; end
  def overwrite; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeclarationClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeclarationOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeclarationParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeclarationRegistrationOptions < ::LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def initialize(id: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DefinitionClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DefinitionOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DefinitionParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DefinitionRegistrationOptions < ::LanguageServer::Protocol::Interface::DefinitionOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeleteFile
  def initialize(kind:, uri:, options: T.unsafe(nil)); end

  def attributes; end
  def kind; end
  def options; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end

class LanguageServer::Protocol::Interface::DeleteFileOptions
  def initialize(recursive: T.unsafe(nil), ignore_if_not_exists: T.unsafe(nil)); end

  def attributes; end
  def ignore_if_not_exists; end
  def recursive; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Diagnostic
  def initialize(range:, message:, severity: T.unsafe(nil), code: T.unsafe(nil), source: T.unsafe(nil), tags: T.unsafe(nil), related_information: T.unsafe(nil)); end

  def attributes; end
  def code; end
  def message; end
  def range; end
  def related_information; end
  def severity; end
  def source; end
  def tags; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DiagnosticRelatedInformation
  def initialize(location:, message:); end

  def attributes; end
  def location; end
  def message; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeConfigurationClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeConfigurationParams
  def initialize(settings:); end

  def attributes; end
  def settings; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeTextDocumentParams
  def initialize(text_document:, content_changes:); end

  def attributes; end
  def content_changes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeWatchedFilesClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeWatchedFilesParams
  def initialize(changes:); end

  def attributes; end
  def changes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeWatchedFilesRegistrationOptions
  def initialize(watchers:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def watchers; end
end

class LanguageServer::Protocol::Interface::DidChangeWorkspaceFoldersParams
  def initialize(event:); end

  def attributes; end
  def event; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidCloseTextDocumentParams
  def initialize(text_document:); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidOpenTextDocumentParams
  def initialize(text_document:); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidSaveTextDocumentParams
  def initialize(text_document:, text: T.unsafe(nil)); end

  def attributes; end
  def text; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentColorClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentColorOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentColorParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentColorRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentColorOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFilter
  def initialize(language: T.unsafe(nil), scheme: T.unsafe(nil), pattern: T.unsafe(nil)); end

  def attributes; end
  def language; end
  def pattern; end
  def scheme; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(text_document:, options:, work_done_token: T.unsafe(nil)); end

  def attributes; end
  def options; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentFormattingOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlight
  def initialize(range:, kind: T.unsafe(nil)); end

  def attributes; end
  def kind; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentHighlightOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentLink
  def initialize(range:, target: T.unsafe(nil), tooltip: T.unsafe(nil), data: T.unsafe(nil)); end

  def attributes; end
  def data; end
  def range; end
  def target; end
  def to_hash; end
  def to_json(*args); end
  def tooltip; end
end

class LanguageServer::Protocol::Interface::DocumentLinkClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), tooltip_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
  def tooltip_support; end
end

class LanguageServer::Protocol::Interface::DocumentLinkOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def attributes; end
  def resolve_provider; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentLinkParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentLinkRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentLinkOptions
  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingOptions
  def initialize(first_trigger_character:, more_trigger_character: T.unsafe(nil)); end

  def attributes; end
  def first_trigger_character; end
  def more_trigger_character; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingParams < ::LanguageServer::Protocol::Interface::TextDocumentPositionParams
  def initialize(text_document:, position:, ch:, options:); end

  def attributes; end
  def ch; end
  def options; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentOnTypeFormattingOptions
  def initialize(first_trigger_character:, more_trigger_character: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(text_document:, range:, options:, work_done_token: T.unsafe(nil)); end

  def attributes; end
  def options; end
  def range; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentRangeFormattingOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbol
  def initialize(name:, kind:, range:, selection_range:, detail: T.unsafe(nil), deprecated: T.unsafe(nil), children: T.unsafe(nil)); end

  def attributes; end
  def children; end
  def deprecated; end
  def detail; end
  def kind; end
  def name; end
  def range; end
  def selection_range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), symbol_kind: T.unsafe(nil), hierarchical_document_symbol_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def hierarchical_document_symbol_support; end
  def symbol_kind; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolRegistrationOptions < ::LanguageServer::Protocol::Interface::DocumentSymbolOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(commands:, work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def commands; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(command:, work_done_token: T.unsafe(nil), arguments: T.unsafe(nil)); end

  def arguments; end
  def attributes; end
  def command; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandRegistrationOptions < ::LanguageServer::Protocol::Interface::ExecuteCommandOptions
  def initialize(commands:, work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileEvent
  def initialize(uri:, type:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def type; end
  def uri; end
end

class LanguageServer::Protocol::Interface::FileSystemWatcher
  def initialize(glob_pattern:, kind: T.unsafe(nil)); end

  def attributes; end
  def glob_pattern; end
  def kind; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRange
  def initialize(start_line:, end_line:, start_character: T.unsafe(nil), end_character: T.unsafe(nil), kind: T.unsafe(nil)); end

  def attributes; end
  def end_character; end
  def end_line; end
  def kind; end
  def start_character; end
  def start_line; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRangeClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), range_limit: T.unsafe(nil), line_folding_only: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def line_folding_only; end
  def range_limit; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRangeOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRangeParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRangeRegistrationOptions < ::LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def initialize(id: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FormattingOptions
  def initialize(tab_size:, insert_spaces:, trim_trailing_whitespace: T.unsafe(nil), insert_final_newline: T.unsafe(nil), trim_final_newlines: T.unsafe(nil)); end

  def attributes; end
  def insert_final_newline; end
  def insert_spaces; end
  def tab_size; end
  def to_hash; end
  def to_json(*args); end
  def trim_final_newlines; end
  def trim_trailing_whitespace; end
end

class LanguageServer::Protocol::Interface::Hover
  def initialize(contents:, range: T.unsafe(nil)); end

  def attributes; end
  def contents; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::HoverClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), content_format: T.unsafe(nil)); end

  def attributes; end
  def content_format; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::HoverOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::HoverParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(work_done_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::HoverRegistrationOptions < ::LanguageServer::Protocol::Interface::HoverOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ImplementationClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ImplementationOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ImplementationParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ImplementationRegistrationOptions < ::LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def initialize(id: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InitializeError
  def initialize(retry:); end

  def attributes; end
  def retry; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InitializeParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(process_id:, root_uri:, capabilities:, work_done_token: T.unsafe(nil), client_info: T.unsafe(nil), root_path: T.unsafe(nil), initialization_options: T.unsafe(nil), trace: T.unsafe(nil), workspace_folders: T.unsafe(nil)); end

  def attributes; end
  def capabilities; end
  def client_info; end
  def initialization_options; end
  def process_id; end
  def root_path; end
  def root_uri; end
  def to_hash; end
  def to_json(*args); end
  def trace; end
  def workspace_folders; end
end

class LanguageServer::Protocol::Interface::InitializeResult
  def initialize(capabilities:, server_info: T.unsafe(nil)); end

  def attributes; end
  def capabilities; end
  def server_info; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InitializedParams
  def initialize; end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Location
  def initialize(uri:, range:); end

  def attributes; end
  def range; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end

class LanguageServer::Protocol::Interface::LocationLink
  def initialize(target_uri:, target_range:, target_selection_range:, origin_selection_range: T.unsafe(nil)); end

  def attributes; end
  def origin_selection_range; end
  def target_range; end
  def target_selection_range; end
  def target_uri; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::LogMessageParams
  def initialize(type:, message:); end

  def attributes; end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def type; end
end

class LanguageServer::Protocol::Interface::MarkupContent
  def initialize(kind:, value:); end

  def attributes; end
  def kind; end
  def to_hash; end
  def to_json(*args); end
  def value; end
end

class LanguageServer::Protocol::Interface::Message
  def initialize(jsonrpc:); end

  def attributes; end
  def jsonrpc; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::MessageActionItem
  def initialize(title:); end

  def attributes; end
  def title; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotificationMessage < ::LanguageServer::Protocol::Interface::Message
  def initialize(jsonrpc:, method:, params: T.unsafe(nil)); end

  def attributes; end
  def method; end
  def params; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ParameterInformation
  def initialize(label:, documentation: T.unsafe(nil)); end

  def attributes; end
  def documentation; end
  def label; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def partial_result_token; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Position
  def initialize(line:, character:); end

  def attributes; end
  def character; end
  def line; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::PrepareRenameParams < ::LanguageServer::Protocol::Interface::TextDocumentPositionParams
  def initialize(text_document:, position:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ProgressParams
  def initialize(token:, value:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def token; end
  def value; end
end

class LanguageServer::Protocol::Interface::PublishDiagnosticsClientCapabilities
  def initialize(related_information: T.unsafe(nil), tag_support: T.unsafe(nil), version_support: T.unsafe(nil)); end

  def attributes; end
  def related_information; end
  def tag_support; end
  def to_hash; end
  def to_json(*args); end
  def version_support; end
end

class LanguageServer::Protocol::Interface::PublishDiagnosticsParams
  def initialize(uri:, diagnostics:, version: T.unsafe(nil)); end

  def attributes; end
  def diagnostics; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end

class LanguageServer::Protocol::Interface::Range
  def initialize(start:, end:); end

  def attributes; end
  def end; end
  def start; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceContext
  def initialize(include_declaration:); end

  def attributes; end
  def include_declaration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(context:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def context; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceRegistrationOptions < ::LanguageServer::Protocol::Interface::ReferenceOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Registration
  def initialize(id:, method:, register_options: T.unsafe(nil)); end

  def attributes; end
  def id; end
  def method; end
  def register_options; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RegistrationParams
  def initialize(registrations:); end

  def attributes; end
  def registrations; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), prepare_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def prepare_support; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameFile
  def initialize(kind:, old_uri:, new_uri:, options: T.unsafe(nil)); end

  def attributes; end
  def kind; end
  def new_uri; end
  def old_uri; end
  def options; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameFileOptions
  def initialize(overwrite: T.unsafe(nil), ignore_if_exists: T.unsafe(nil)); end

  def attributes; end
  def ignore_if_exists; end
  def overwrite; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil), prepare_provider: T.unsafe(nil)); end

  def attributes; end
  def prepare_provider; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(new_name:, work_done_token: T.unsafe(nil)); end

  def attributes; end
  def new_name; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameRegistrationOptions < ::LanguageServer::Protocol::Interface::RenameOptions
  def initialize(work_done_progress: T.unsafe(nil), prepare_provider: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RequestMessage < ::LanguageServer::Protocol::Interface::Message
  def initialize(jsonrpc:, id:, method:, params: T.unsafe(nil)); end

  def attributes; end
  def id; end
  def method; end
  def params; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ResponseError
  def initialize(code:, message:, data: T.unsafe(nil)); end

  def attributes; end
  def code; end
  def data; end
  def message; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ResponseMessage < ::LanguageServer::Protocol::Interface::Message
  def initialize(jsonrpc:, id:, result: T.unsafe(nil), error: T.unsafe(nil)); end

  def attributes; end
  def error; end
  def id; end
  def result; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SaveOptions
  def initialize(include_text: T.unsafe(nil)); end

  def attributes; end
  def include_text; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRange
  def initialize(range:, parent: T.unsafe(nil)); end

  def attributes; end
  def parent; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRangeClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRangeOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRangeParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(text_document:, positions:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def positions; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRangeRegistrationOptions < ::LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def initialize(id: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ServerCapabilities
  def initialize(text_document_sync: T.unsafe(nil), completion_provider: T.unsafe(nil), hover_provider: T.unsafe(nil), signature_help_provider: T.unsafe(nil), declaration_provider: T.unsafe(nil), definition_provider: T.unsafe(nil), type_definition_provider: T.unsafe(nil), implementation_provider: T.unsafe(nil), references_provider: T.unsafe(nil), document_highlight_provider: T.unsafe(nil), document_symbol_provider: T.unsafe(nil), code_action_provider: T.unsafe(nil), code_lens_provider: T.unsafe(nil), document_link_provider: T.unsafe(nil), color_provider: T.unsafe(nil), document_formatting_provider: T.unsafe(nil), document_range_formatting_provider: T.unsafe(nil), document_on_type_formatting_provider: T.unsafe(nil), rename_provider: T.unsafe(nil), folding_range_provider: T.unsafe(nil), execute_command_provider: T.unsafe(nil), selection_range_provider: T.unsafe(nil), workspace_symbol_provider: T.unsafe(nil), workspace: T.unsafe(nil), experimental: T.unsafe(nil)); end

  def attributes; end
  def code_action_provider; end
  def code_lens_provider; end
  def color_provider; end
  def completion_provider; end
  def declaration_provider; end
  def definition_provider; end
  def document_formatting_provider; end
  def document_highlight_provider; end
  def document_link_provider; end
  def document_on_type_formatting_provider; end
  def document_range_formatting_provider; end
  def document_symbol_provider; end
  def execute_command_provider; end
  def experimental; end
  def folding_range_provider; end
  def hover_provider; end
  def implementation_provider; end
  def references_provider; end
  def rename_provider; end
  def selection_range_provider; end
  def signature_help_provider; end
  def text_document_sync; end
  def to_hash; end
  def to_json(*args); end
  def type_definition_provider; end
  def workspace; end
  def workspace_symbol_provider; end
end

class LanguageServer::Protocol::Interface::ShowMessageParams
  def initialize(type:, message:); end

  def attributes; end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def type; end
end

class LanguageServer::Protocol::Interface::ShowMessageRequestParams
  def initialize(type:, message:, actions: T.unsafe(nil)); end

  def actions; end
  def attributes; end
  def message; end
  def to_hash; end
  def to_json(*args); end
  def type; end
end

class LanguageServer::Protocol::Interface::SignatureHelp
  def initialize(signatures:, active_signature: T.unsafe(nil), active_parameter: T.unsafe(nil)); end

  def active_parameter; end
  def active_signature; end
  def attributes; end
  def signatures; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SignatureHelpClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), signature_information: T.unsafe(nil), context_support: T.unsafe(nil)); end

  def attributes; end
  def context_support; end
  def dynamic_registration; end
  def signature_information; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SignatureHelpContext
  def initialize(trigger_kind:, is_retrigger:, trigger_character: T.unsafe(nil), active_signature_help: T.unsafe(nil)); end

  def active_signature_help; end
  def attributes; end
  def is_retrigger; end
  def to_hash; end
  def to_json(*args); end
  def trigger_character; end
  def trigger_kind; end
end

class LanguageServer::Protocol::Interface::SignatureHelpOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), retrigger_characters: T.unsafe(nil)); end

  def attributes; end
  def retrigger_characters; end
  def to_hash; end
  def to_json(*args); end
  def trigger_characters; end
end

class LanguageServer::Protocol::Interface::SignatureHelpParams < ::LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(work_done_token: T.unsafe(nil), context: T.unsafe(nil)); end

  def attributes; end
  def context; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SignatureHelpRegistrationOptions < ::LanguageServer::Protocol::Interface::SignatureHelpOptions
  def initialize(work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), retrigger_characters: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SignatureInformation
  def initialize(label:, documentation: T.unsafe(nil), parameters: T.unsafe(nil)); end

  def attributes; end
  def documentation; end
  def label; end
  def parameters; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def initialize(id: T.unsafe(nil)); end

  def attributes; end
  def id; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SymbolInformation
  def initialize(name:, kind:, location:, deprecated: T.unsafe(nil), container_name: T.unsafe(nil)); end

  def attributes; end
  def container_name; end
  def deprecated; end
  def kind; end
  def location; end
  def name; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentChangeRegistrationOptions < ::LanguageServer::Protocol::Interface::TextDocumentRegistrationOptions
  def initialize(document_selector:, sync_kind:); end

  def attributes; end
  def sync_kind; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentClientCapabilities
  def initialize(synchronization: T.unsafe(nil), completion: T.unsafe(nil), hover: T.unsafe(nil), signature_help: T.unsafe(nil), declaration: T.unsafe(nil), definition: T.unsafe(nil), type_definition: T.unsafe(nil), implementation: T.unsafe(nil), references: T.unsafe(nil), document_highlight: T.unsafe(nil), document_symbol: T.unsafe(nil), code_action: T.unsafe(nil), code_lens: T.unsafe(nil), document_link: T.unsafe(nil), color_provider: T.unsafe(nil), formatting: T.unsafe(nil), range_formatting: T.unsafe(nil), on_type_formatting: T.unsafe(nil), rename: T.unsafe(nil), publish_diagnostics: T.unsafe(nil), folding_range: T.unsafe(nil), selection_range: T.unsafe(nil)); end

  def attributes; end
  def code_action; end
  def code_lens; end
  def color_provider; end
  def completion; end
  def declaration; end
  def definition; end
  def document_highlight; end
  def document_link; end
  def document_symbol; end
  def folding_range; end
  def formatting; end
  def hover; end
  def implementation; end
  def on_type_formatting; end
  def publish_diagnostics; end
  def range_formatting; end
  def references; end
  def rename; end
  def selection_range; end
  def signature_help; end
  def synchronization; end
  def to_hash; end
  def to_json(*args); end
  def type_definition; end
end

class LanguageServer::Protocol::Interface::TextDocumentContentChangeEvent
  def initialize(text:, range: T.unsafe(nil), range_length: T.unsafe(nil)); end

  def attributes; end
  def range; end
  def range_length; end
  def text; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentEdit
  def initialize(text_document:, edits:); end

  def attributes; end
  def edits; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentIdentifier
  def initialize(uri:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end

class LanguageServer::Protocol::Interface::TextDocumentItem
  def initialize(uri:, language_id:, version:, text:); end

  def attributes; end
  def language_id; end
  def text; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
  def version; end
end

class LanguageServer::Protocol::Interface::TextDocumentPositionParams
  def initialize(text_document:, position:); end

  def attributes; end
  def position; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentRegistrationOptions
  def initialize(document_selector:); end

  def attributes; end
  def document_selector; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentSaveRegistrationOptions < ::LanguageServer::Protocol::Interface::TextDocumentRegistrationOptions
  def initialize(document_selector:, include_text: T.unsafe(nil)); end

  def attributes; end
  def include_text; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentSyncClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), will_save: T.unsafe(nil), will_save_wait_until: T.unsafe(nil), did_save: T.unsafe(nil)); end

  def attributes; end
  def did_save; end
  def dynamic_registration; end
  def to_hash; end
  def to_json(*args); end
  def will_save; end
  def will_save_wait_until; end
end

class LanguageServer::Protocol::Interface::TextDocumentSyncOptions
  def initialize(open_close: T.unsafe(nil), change: T.unsafe(nil), will_save: T.unsafe(nil), will_save_wait_until: T.unsafe(nil), save: T.unsafe(nil)); end

  def attributes; end
  def change; end
  def open_close; end
  def save; end
  def to_hash; end
  def to_json(*args); end
  def will_save; end
  def will_save_wait_until; end
end

class LanguageServer::Protocol::Interface::TextEdit
  def initialize(range:, new_text:); end

  def attributes; end
  def new_text; end
  def range; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def link_support; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionRegistrationOptions < ::LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def initialize(id: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Unregistration
  def initialize(id:, method:); end

  def attributes; end
  def id; end
  def method; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::UnregistrationParams
  def initialize(unregisterations:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def unregisterations; end
end

class LanguageServer::Protocol::Interface::VersionedTextDocumentIdentifier < ::LanguageServer::Protocol::Interface::TextDocumentIdentifier
  def initialize(uri:, version:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def version; end
end

class LanguageServer::Protocol::Interface::WillSaveTextDocumentParams
  def initialize(text_document:, reason:); end

  def attributes; end
  def reason; end
  def text_document; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressBegin
  def initialize(kind:, title:, cancellable: T.unsafe(nil), message: T.unsafe(nil), percentage: T.unsafe(nil)); end

  def attributes; end
  def cancellable; end
  def kind; end
  def message; end
  def percentage; end
  def title; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressCancelParams
  def initialize(token:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def token; end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressCreateParams
  def initialize(token:); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def token; end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressEnd
  def initialize(kind:, message: T.unsafe(nil)); end

  def attributes; end
  def kind; end
  def message; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def work_done_progress; end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def initialize(work_done_token: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
  def work_done_token; end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressReport
  def initialize(kind:, cancellable: T.unsafe(nil), message: T.unsafe(nil), percentage: T.unsafe(nil)); end

  def attributes; end
  def cancellable; end
  def kind; end
  def message; end
  def percentage; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceEdit
  def initialize(changes: T.unsafe(nil), document_changes: T.unsafe(nil)); end

  def attributes; end
  def changes; end
  def document_changes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceEditClientCapabilities
  def initialize(document_changes: T.unsafe(nil), resource_operations: T.unsafe(nil), failure_handling: T.unsafe(nil)); end

  def attributes; end
  def document_changes; end
  def failure_handling; end
  def resource_operations; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceFolder
  def initialize(uri:, name:); end

  def attributes; end
  def name; end
  def to_hash; end
  def to_json(*args); end
  def uri; end
end

class LanguageServer::Protocol::Interface::WorkspaceFoldersChangeEvent
  def initialize(added:, removed:); end

  def added; end
  def attributes; end
  def removed; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceFoldersServerCapabilities
  def initialize(supported: T.unsafe(nil), change_notifications: T.unsafe(nil)); end

  def attributes; end
  def change_notifications; end
  def supported; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolClientCapabilities
  def initialize(dynamic_registration: T.unsafe(nil), symbol_kind: T.unsafe(nil)); end

  def attributes; end
  def dynamic_registration; end
  def symbol_kind; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolOptions < ::LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolParams < ::LanguageServer::Protocol::Interface::PartialResultParams
  def initialize(query:, partial_result_token: T.unsafe(nil)); end

  def attributes; end
  def query; end
  def to_hash; end
  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolRegistrationOptions < ::LanguageServer::Protocol::Interface::WorkspaceSymbolOptions
  def initialize(work_done_progress: T.unsafe(nil)); end

  def attributes; end
  def to_hash; end
  def to_json(*args); end
end

module LanguageServer::Protocol::Transport
end

module LanguageServer::Protocol::Transport::Io
end

class LanguageServer::Protocol::Transport::Io::Reader
  def initialize(io); end

  def read(&block); end

  private

  def io; end
end

class LanguageServer::Protocol::Transport::Io::Writer
  def initialize(io); end

  def io; end
  def write(response); end
end

module LanguageServer::Protocol::Transport::Stdio
end

class LanguageServer::Protocol::Transport::Stdio::Reader < ::LanguageServer::Protocol::Transport::Io::Reader
  def initialize; end
end

class LanguageServer::Protocol::Transport::Stdio::Writer < ::LanguageServer::Protocol::Transport::Io::Writer
  def initialize; end
end

LanguageServer::Protocol::VERSION = T.let(T.unsafe(nil), String)
