# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rbs` gem.
# Please instead update this file by running `tapioca sync`.

# typed: true

module Kernel
  def Namespace(name); end
  def TypeName(string); end
end

module RBS
  class << self
    def logger; end
    def logger_level; end
    def logger_level=(level); end
    def logger_output; end
    def logger_output=(val); end
  end
end

module RBS::AST
end

class RBS::AST::Annotation
  def initialize(string:, location:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def location; end
  def string; end
  def to_json(*a); end
end

class RBS::AST::Comment
  def initialize(string:, location:); end

  def ==(other); end
  def concat(string:, location:); end
  def eql?(other); end
  def hash; end
  def location; end
  def string; end
  def to_json(*a); end
end

module RBS::AST::Declarations
end

class RBS::AST::Declarations::Alias < ::RBS::AST::Declarations::Base
  def initialize(name:, type:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
  def to_json(*a); end
  def type; end
end

class RBS::AST::Declarations::Base
end

class RBS::AST::Declarations::Class < ::RBS::AST::Declarations::Base
  include(::RBS::AST::Declarations::NestedDeclarationHelper)
  include(::RBS::AST::Declarations::MixinHelper)

  def initialize(name:, type_params:, super_class:, members:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def members; end
  def name; end
  def super_class; end
  def to_json(*a); end
  def type_params; end
end

class RBS::AST::Declarations::Class::Super
  def initialize(name:, args:, location:); end

  def ==(other); end
  def args; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
  def to_json(*a); end
end

class RBS::AST::Declarations::Constant < ::RBS::AST::Declarations::Base
  def initialize(name:, type:, location:, comment:); end

  def ==(other); end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
  def to_json(*a); end
  def type; end
end

class RBS::AST::Declarations::Global < ::RBS::AST::Declarations::Base
  def initialize(name:, type:, location:, comment:); end

  def ==(other); end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
  def to_json(*a); end
  def type; end
end

class RBS::AST::Declarations::Interface < ::RBS::AST::Declarations::Base
  include(::RBS::AST::Declarations::MixinHelper)

  def initialize(name:, type_params:, members:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def members; end
  def name; end
  def to_json(*a); end
  def type_params; end
end

module RBS::AST::Declarations::MixinHelper
  def each_mixin(&block); end
end

class RBS::AST::Declarations::Module < ::RBS::AST::Declarations::Base
  include(::RBS::AST::Declarations::NestedDeclarationHelper)
  include(::RBS::AST::Declarations::MixinHelper)

  def initialize(name:, type_params:, members:, self_types:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def members; end
  def name; end
  def self_types; end
  def to_json(*a); end
  def type_params; end
end

class RBS::AST::Declarations::Module::Self
  def initialize(name:, args:, location:); end

  def ==(other); end
  def args; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
  def to_json(*a); end
  def to_s; end
end

class RBS::AST::Declarations::ModuleTypeParams
  def initialize; end

  def ==(other); end
  def [](name); end
  def add(param); end
  def each(&block); end
  def empty?; end
  def eql?(other); end
  def hash; end
  def params; end
  def rename_to(names); end
  def size; end
  def skip_validation?(name); end
  def to_json(*a); end
  def variance(name); end

  class << self
    def empty; end
  end
end

class RBS::AST::Declarations::ModuleTypeParams::TypeParam < ::Struct
  def name; end
  def name=(_); end
  def skip_validation; end
  def skip_validation=(_); end
  def to_json(*a); end
  def variance; end
  def variance=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module RBS::AST::Declarations::NestedDeclarationHelper
  def each_decl; end
  def each_member; end
end

module RBS::AST::Members
end

class RBS::AST::Members::Alias < ::RBS::AST::Members::Base
  def initialize(new_name:, old_name:, kind:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def instance?; end
  def kind; end
  def location; end
  def new_name; end
  def old_name; end
  def singleton?; end
  def to_json(*a); end
end

class RBS::AST::Members::AttrAccessor < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Attribute)

  def to_json(*a); end
end

class RBS::AST::Members::AttrReader < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Attribute)

  def to_json(*a); end
end

class RBS::AST::Members::AttrWriter < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Attribute)

  def to_json(*a); end
end

module RBS::AST::Members::Attribute
  def initialize(name:, type:, ivar_name:, kind:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def ivar_name; end
  def kind; end
  def location; end
  def name; end
  def type; end
end

class RBS::AST::Members::Base
end

class RBS::AST::Members::ClassInstanceVariable < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Var)

  def to_json(*a); end
end

class RBS::AST::Members::ClassVariable < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Var)

  def to_json(*a); end
end

class RBS::AST::Members::Extend < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Mixin)

  def to_json(*a); end
end

class RBS::AST::Members::Include < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Mixin)

  def to_json(*a); end
end

class RBS::AST::Members::InstanceVariable < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Var)

  def to_json(*a); end
end

module RBS::AST::Members::LocationOnly
  def initialize(location:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def location; end
end

class RBS::AST::Members::MethodDefinition < ::RBS::AST::Members::Base
  def initialize(name:, kind:, types:, annotations:, location:, comment:, overload:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def eql?(other); end
  def hash; end
  def instance?; end
  def kind; end
  def location; end
  def name; end
  def overload; end
  def overload?; end
  def singleton?; end
  def to_json(*a); end
  def types; end
  def update(name: T.unsafe(nil), kind: T.unsafe(nil), types: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), overload: T.unsafe(nil)); end
end

module RBS::AST::Members::Mixin
  def initialize(name:, args:, annotations:, location:, comment:); end

  def ==(other); end
  def annotations; end
  def args; end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
end

class RBS::AST::Members::Prepend < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::Mixin)

  def to_json(*a); end
end

class RBS::AST::Members::Private < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::LocationOnly)

  def to_json(*a); end
end

class RBS::AST::Members::Public < ::RBS::AST::Members::Base
  include(::RBS::AST::Members::LocationOnly)

  def to_json(*a); end
end

module RBS::AST::Members::Var
  def initialize(name:, type:, location:, comment:); end

  def ==(other); end
  def comment; end
  def eql?(other); end
  def hash; end
  def location; end
  def name; end
  def type; end
end

class RBS::Buffer
  def initialize(name:, content:); end

  def content; end
  def last_position; end
  def lines; end
  def loc_to_pos(loc); end
  def name; end
  def pos_to_loc(pos); end
  def ranges; end
end

module RBS::BuiltinNames
end

RBS::BuiltinNames::Array = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::BasicObject = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Class = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Comparable = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Enumerable = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Enumerator = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::FalseClass = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Float = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Hash = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Integer = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Kernel = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Module = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

class RBS::BuiltinNames::Name
  def initialize(name:); end

  def instance_type(*args); end
  def instance_type?(type); end
  def name; end
  def singleton_type; end
  def singleton_type?(type); end
  def to_s; end

  class << self
    def define(name, namespace: T.unsafe(nil)); end
  end
end

RBS::BuiltinNames::Object = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Range = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Regexp = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Set = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::String = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::Symbol = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

RBS::BuiltinNames::TrueClass = T.let(T.unsafe(nil), RBS::BuiltinNames::Name)

class RBS::Constant
  def initialize(name:, type:, entry:); end

  def ==(other); end
  def entry; end
  def eql?(other); end
  def hash; end
  def name; end
  def type; end
end

class RBS::ConstantTable
  def initialize(builder:); end

  def absolute_type(type, context:); end
  def absolute_type_name(type_name, context:, location:); end
  def constant_scopes(name); end
  def constant_scopes0(name, scopes: T.unsafe(nil)); end
  def constant_scopes_cache; end
  def constant_scopes_module(name, scopes:); end
  def definition_builder; end
  def env; end
  def name_to_constant(name); end
  def resolve_constant_reference(name, context:); end
  def resolve_constant_reference_context(name, context:); end
  def resolve_constant_reference_inherit(name, scopes:, no_object: T.unsafe(nil)); end
  def resolver; end
  def split_name(name); end
end

class RBS::Definition
  def initialize(type_name:, entry:, self_type:, ancestors:); end

  def ancestors; end
  def class?; end
  def class_type?; end
  def class_variables; end
  def each_type(&block); end
  def entry; end
  def instance_type?; end
  def instance_variables; end
  def interface?; end
  def interface_type?; end
  def map_method_type(&block); end
  def methods; end
  def module?; end
  def self_type; end
  def sub(s); end
  def type_name; end
  def type_params; end
  def type_params_decl; end
end

module RBS::Definition::Ancestor
end

class RBS::Definition::Ancestor::Instance
  def initialize(name:, args:, source:); end

  def ==(other); end
  def args; end
  def eql?(other); end
  def hash; end
  def name; end
  def source; end
end

class RBS::Definition::Ancestor::Singleton
  def initialize(name:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def name; end
end

class RBS::Definition::InstanceAncestors
  def initialize(type_name:, params:, ancestors:); end

  def ancestors; end
  def apply(args, location:); end
  def params; end
  def type_name; end
end

class RBS::Definition::Method
  def initialize(super_method:, defs:, accessibility:, alias_of:, annotations: T.unsafe(nil)); end

  def ==(other); end
  def accessibility; end
  def alias_of; end
  def annotations; end
  def comments; end
  def defined_in; end
  def defs; end
  def eql?(other); end
  def extra_annotations; end
  def hash; end
  def implemented_in; end
  def map_method_type(&block); end
  def map_type(&block); end
  def members; end
  def method_types; end
  def private?; end
  def public?; end
  def sub(s); end
  def super_method; end
end

class RBS::Definition::Method::TypeDef
  def initialize(type:, member:, defined_in:, implemented_in:); end

  def ==(other); end
  def annotations; end
  def comment; end
  def defined_in; end
  def eql?(other); end
  def hash; end
  def implemented_in; end
  def member; end
  def overload?; end
  def type; end
  def update(type: T.unsafe(nil), member: T.unsafe(nil), defined_in: T.unsafe(nil), implemented_in: T.unsafe(nil)); end
end

class RBS::Definition::SingletonAncestors
  def initialize(type_name:, ancestors:); end

  def ancestors; end
  def type_name; end
end

class RBS::Definition::Variable
  def initialize(parent_variable:, type:, declared_in:); end

  def declared_in; end
  def parent_variable; end
  def sub(s); end
  def type; end
end

class RBS::DefinitionBuilder
  def initialize(env:); end

  def ancestor_builder; end
  def build_instance(type_name); end
  def build_interface(type_name); end
  def build_singleton(type_name); end
  def build_singleton0(type_name); end
  def define_methods(definition, interface_methods:, methods:, super_interface_method:); end
  def ensure_namespace!(namespace, location:); end
  def env; end
  def expand_alias(type_name); end
  def insert_variable(type_name, variables, name:, type:); end
  def instance_cache; end
  def interface_cache; end
  def merge_definition(src:, dest:, subst:, implemented_in: T.unsafe(nil), keep_super: T.unsafe(nil)); end
  def merge_method(type_name, methods, name, method, sub, implemented_in: T.unsafe(nil), keep_super: T.unsafe(nil)); end
  def merge_variable(variables, name, variable, sub, keep_super: T.unsafe(nil)); end
  def method_builder; end
  def singleton0_cache; end
  def singleton_cache; end
  def source_location(source, decl); end
  def try_cache(type_name, cache:); end
  def type_name_resolver; end
  def validate_params_with(type_params, result:); end
  def validate_type_params(definition, ancestors:, methods:); end
end

class RBS::DefinitionBuilder::AncestorBuilder
  def initialize(env:); end

  def env; end
  def instance_ancestors(type_name, building_ancestors: T.unsafe(nil)); end
  def instance_ancestors_cache; end
  def interface_ancestors(type_name, building_ancestors: T.unsafe(nil)); end
  def interface_ancestors_cache; end
  def mixin_ancestors(entry, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end
  def mixin_ancestors0(decl, align_params:, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end
  def one_instance_ancestors(type_name); end
  def one_instance_ancestors_cache; end
  def one_interface_ancestors(type_name); end
  def one_interface_ancestors_cache; end
  def one_singleton_ancestors(type_name); end
  def one_singleton_ancestors_cache; end
  def singleton_ancestors(type_name, building_ancestors: T.unsafe(nil)); end
  def singleton_ancestors_cache; end
  def validate_super_class!(type_name, entry); end
end

class RBS::DefinitionBuilder::AncestorBuilder::OneAncestors
  def initialize(type_name:, params:, super_class:, self_types:, included_modules:, included_interfaces:, prepended_modules:, extended_modules:, extended_interfaces:); end

  def each_ancestor(&block); end
  def each_extended_interface(&block); end
  def each_extended_module(&block); end
  def each_included_interface(&block); end
  def each_included_module(&block); end
  def each_prepended_module(&block); end
  def each_self_type(&block); end
  def extended_interfaces; end
  def extended_modules; end
  def included_interfaces; end
  def included_modules; end
  def params; end
  def prepended_modules; end
  def self_types; end
  def super_class; end
  def type_name; end

  class << self
    def class_instance(type_name:, params:, super_class:); end
    def interface(type_name:, params:); end
    def module_instance(type_name:, params:); end
    def singleton(type_name:, super_class:); end
  end
end

class RBS::DefinitionBuilder::MethodBuilder
  def initialize(env:); end

  def build_alias(methods, type, member:, accessibility:); end
  def build_attribute(methods, type, member:, accessibility:); end
  def build_instance(type_name); end
  def build_interface(type_name); end
  def build_method(methods, type, member:, accessibility:); end
  def build_singleton(type_name); end
  def each_member_with_accessibility(members, accessibility: T.unsafe(nil)); end
  def env; end
  def instance_methods; end
  def interface_methods; end
  def singleton_methods; end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods
  def initialize(type:); end

  def each; end
  def methods; end
  def type; end
  def validate!; end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods::Definition < ::Struct
  def accessibilities; end
  def accessibilities=(_); end
  def accessibility; end
  def name; end
  def name=(_); end
  def original; end
  def originals; end
  def originals=(_); end
  def overloads; end
  def overloads=(_); end
  def type; end
  def type=(_); end

  class << self
    def [](*_arg0); end
    def empty(name:, type:); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods::Sorter
  include(::TSort)

  def initialize(methods); end

  def methods; end
  def tsort_each_child(defn); end
  def tsort_each_node(&block); end
end

class RBS::DuplicatedDeclarationError < ::StandardError
  def initialize(name, *decls); end

  def decls; end
  def name; end
end

class RBS::DuplicatedInterfaceMethodDefinitionError < ::StandardError
  def initialize(type:, method_name:, member:); end

  def member; end
  def method_name; end
  def qualified_method_name; end
  def type; end
end

class RBS::DuplicatedMethodDefinitionError < ::StandardError
  def initialize(type:, method_name:, members:); end

  def location; end
  def members; end
  def method_name; end
  def other_locations; end
  def qualified_method_name; end
  def type; end
end

class RBS::Environment
  def initialize; end

  def <<(decl); end
  def absolute_type(resolver, type, context:); end
  def absolute_type_name(resolver, type_name, context:); end
  def alias_decls; end
  def buffers; end
  def cache_name(cache, name:, decl:, outer:); end
  def class_decls; end
  def constant_decls; end
  def declarations; end
  def global_decls; end
  def insert_decl(decl, outer:, namespace:); end
  def inspect; end
  def interface_decls; end
  def resolve_declaration(resolver, decl, outer:, prefix:); end
  def resolve_member(resolver, member, context:); end
  def resolve_type_names; end

  private

  def initialize_copy(other); end

  class << self
    def from_loader(loader); end
  end
end

class RBS::Environment::ClassEntry < ::RBS::Environment::MultiEntry
  def primary; end
end

module RBS::Environment::ContextUtil
  def context; end
end

class RBS::Environment::ModuleEntry < ::RBS::Environment::MultiEntry
  def primary; end
  def self_types; end
end

class RBS::Environment::MultiEntry
  def initialize(name:); end

  def decls; end
  def insert(decl:, outer:); end
  def name; end
  def primary; end
  def type_params; end
  def validate_type_params; end
end

class RBS::Environment::MultiEntry::D < ::Struct
  include(::RBS::Environment::ContextUtil)

  def decl; end
  def decl=(_); end
  def outer; end
  def outer=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::Environment::SingleEntry
  include(::RBS::Environment::ContextUtil)

  def initialize(name:, decl:, outer:); end

  def decl; end
  def name; end
  def outer; end
end

class RBS::EnvironmentLoader
  def initialize(core_root: T.unsafe(nil), repository: T.unsafe(nil)); end

  def add(path: T.unsafe(nil), library: T.unsafe(nil), version: T.unsafe(nil)); end
  def core_root; end
  def dirs; end
  def each_decl; end
  def each_dir; end
  def each_file(path, immediate:, skip_hidden:, &block); end
  def has_library?(library:, version:); end
  def libs; end
  def load(env:); end
  def repository; end

  class << self
    def gem_sig_path(name, version); end
  end
end

RBS::EnvironmentLoader::DEFAULT_CORE_ROOT = T.let(T.unsafe(nil), Pathname)

class RBS::EnvironmentLoader::Library < ::Struct
  def name; end
  def name=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::EnvironmentLoader::UnknownLibraryError < ::StandardError
  def initialize(lib:); end

  def library; end
end

class RBS::EnvironmentWalker
  include(::TSort)

  def initialize(env:); end

  def builder; end
  def each_type_name(type, &block); end
  def each_type_node(type, &block); end
  def env; end
  def only_ancestors!(only = T.unsafe(nil)); end
  def only_ancestors?; end
  def tsort_each_child(node, &block); end
  def tsort_each_node(&block); end
end

class RBS::EnvironmentWalker::InstanceNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::EnvironmentWalker::SingletonNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::EnvironmentWalker::TypeNameNode < ::Struct
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::Factory
  def type_name(string); end
end

class RBS::GenericParameterMismatchError < ::StandardError
  def initialize(name:, decl:); end

  def decl; end
  def name; end
end

class RBS::InvalidOverloadMethodError < ::StandardError
  def initialize(type_name:, method_name:, kind:, members:); end

  def kind; end
  def members; end
  def method_name; end
  def type_name; end
end

class RBS::InvalidTypeApplicationError < ::StandardError
  def initialize(type_name:, args:, params:, location:); end

  def args; end
  def location; end
  def params; end
  def type_name; end

  class << self
    def check!(type_name:, args:, params:, location:); end
  end
end

class RBS::InvalidVarianceAnnotationError < ::StandardError
  def initialize(type_name:, param:, location:); end

  def location; end
  def param; end
  def type_name; end
end

class RBS::Location
  def initialize(buffer:, start_pos:, end_pos:); end

  def +(other); end
  def <<(other); end
  def ==(other); end
  def buffer; end
  def concat(*others); end
  def end_column; end
  def end_line; end
  def end_loc; end
  def end_pos; end
  def inspect; end
  def name; end
  def pred?(loc); end
  def source; end
  def start_column; end
  def start_line; end
  def start_loc; end
  def start_pos; end
  def to_json(*args); end
  def to_s; end

  class << self
    def to_string(location, default: T.unsafe(nil)); end
  end
end

module RBS::MethodNameHelper
  def method_name_string; end
end

class RBS::MethodType
  def initialize(type_params:, type:, block:, location:); end

  def ==(other); end
  def block; end
  def each_type(&block); end
  def free_variables(set = T.unsafe(nil)); end
  def location; end
  def map_type(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s; end
  def type; end
  def type_params; end
  def update(type_params: T.unsafe(nil), type: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end
end

class RBS::Namespace
  def initialize(path:, absolute:); end

  def +(other); end
  def ==(other); end
  def absolute!; end
  def absolute?; end
  def append(component); end
  def ascend; end
  def empty?; end
  def eql?(other); end
  def hash; end
  def parent; end
  def path; end
  def relative!; end
  def relative?; end
  def split; end
  def to_s; end
  def to_type_name; end

  class << self
    def empty; end
    def parse(string); end
    def root; end
  end
end

class RBS::NoMixinFoundError < ::StandardError
  def initialize(type_name:, member:); end

  def location; end
  def member; end
  def type_name; end

  class << self
    def check!(type_name, env:, member:); end
  end
end

class RBS::NoSelfTypeFoundError < ::StandardError
  def initialize(type_name:, location:); end

  def location; end
  def type_name; end

  class << self
    def check!(self_type, env:); end
  end
end

class RBS::NoSuperclassFoundError < ::StandardError
  def initialize(type_name:, location:); end

  def location; end
  def type_name; end

  class << self
    def check!(type_name, env:, location:); end
  end
end

class RBS::NoTypeFoundError < ::StandardError
  def initialize(type_name:, location:); end

  def location; end
  def type_name; end

  class << self
    def check!(type_name, env:, location:); end
  end
end

class RBS::Parser < ::Racc::Parser
  def initialize(type, buffer:, eof_re:); end

  def _reduce_1(val, _values, result); end
  def _reduce_137(val, _values, result); end
  def _reduce_138(val, _values, result); end
  def _reduce_139(val, _values, result); end
  def _reduce_14(val, _values, result); end
  def _reduce_140(val, _values, result); end
  def _reduce_141(val, _values, result); end
  def _reduce_142(val, _values, result); end
  def _reduce_143(val, _values, result); end
  def _reduce_144(val, _values, result); end
  def _reduce_145(val, _values, result); end
  def _reduce_146(val, _values, result); end
  def _reduce_147(val, _values, result); end
  def _reduce_148(val, _values, result); end
  def _reduce_149(val, _values, result); end
  def _reduce_15(val, _values, result); end
  def _reduce_150(val, _values, result); end
  def _reduce_151(val, _values, result); end
  def _reduce_152(val, _values, result); end
  def _reduce_153(val, _values, result); end
  def _reduce_154(val, _values, result); end
  def _reduce_155(val, _values, result); end
  def _reduce_156(val, _values, result); end
  def _reduce_158(val, _values, result); end
  def _reduce_159(val, _values, result); end
  def _reduce_16(val, _values, result); end
  def _reduce_160(val, _values, result); end
  def _reduce_161(val, _values, result); end
  def _reduce_162(val, _values, result); end
  def _reduce_163(val, _values, result); end
  def _reduce_164(val, _values, result); end
  def _reduce_165(val, _values, result); end
  def _reduce_166(val, _values, result); end
  def _reduce_167(val, _values, result); end
  def _reduce_168(val, _values, result); end
  def _reduce_169(val, _values, result); end
  def _reduce_17(val, _values, result); end
  def _reduce_170(val, _values, result); end
  def _reduce_171(val, _values, result); end
  def _reduce_172(val, _values, result); end
  def _reduce_173(val, _values, result); end
  def _reduce_174(val, _values, result); end
  def _reduce_175(val, _values, result); end
  def _reduce_176(val, _values, result); end
  def _reduce_177(val, _values, result); end
  def _reduce_178(val, _values, result); end
  def _reduce_179(val, _values, result); end
  def _reduce_18(val, _values, result); end
  def _reduce_180(val, _values, result); end
  def _reduce_181(val, _values, result); end
  def _reduce_182(val, _values, result); end
  def _reduce_183(val, _values, result); end
  def _reduce_185(val, _values, result); end
  def _reduce_186(val, _values, result); end
  def _reduce_187(val, _values, result); end
  def _reduce_188(val, _values, result); end
  def _reduce_189(val, _values, result); end
  def _reduce_19(val, _values, result); end
  def _reduce_190(val, _values, result); end
  def _reduce_191(val, _values, result); end
  def _reduce_192(val, _values, result); end
  def _reduce_193(val, _values, result); end
  def _reduce_194(val, _values, result); end
  def _reduce_195(val, _values, result); end
  def _reduce_196(val, _values, result); end
  def _reduce_198(val, _values, result); end
  def _reduce_2(val, _values, result); end
  def _reduce_20(val, _values, result); end
  def _reduce_203(val, _values, result); end
  def _reduce_204(val, _values, result); end
  def _reduce_205(val, _values, result); end
  def _reduce_206(val, _values, result); end
  def _reduce_207(val, _values, result); end
  def _reduce_208(val, _values, result); end
  def _reduce_21(val, _values, result); end
  def _reduce_210(val, _values, result); end
  def _reduce_211(val, _values, result); end
  def _reduce_213(val, _values, result); end
  def _reduce_214(val, _values, result); end
  def _reduce_216(val, _values, result); end
  def _reduce_217(val, _values, result); end
  def _reduce_219(val, _values, result); end
  def _reduce_22(val, _values, result); end
  def _reduce_220(val, _values, result); end
  def _reduce_221(val, _values, result); end
  def _reduce_222(val, _values, result); end
  def _reduce_223(val, _values, result); end
  def _reduce_224(val, _values, result); end
  def _reduce_225(val, _values, result); end
  def _reduce_226(val, _values, result); end
  def _reduce_227(val, _values, result); end
  def _reduce_228(val, _values, result); end
  def _reduce_229(val, _values, result); end
  def _reduce_23(val, _values, result); end
  def _reduce_230(val, _values, result); end
  def _reduce_235(val, _values, result); end
  def _reduce_239(val, _values, result); end
  def _reduce_24(val, _values, result); end
  def _reduce_240(val, _values, result); end
  def _reduce_241(val, _values, result); end
  def _reduce_242(val, _values, result); end
  def _reduce_243(val, _values, result); end
  def _reduce_244(val, _values, result); end
  def _reduce_25(val, _values, result); end
  def _reduce_26(val, _values, result); end
  def _reduce_27(val, _values, result); end
  def _reduce_28(val, _values, result); end
  def _reduce_29(val, _values, result); end
  def _reduce_3(val, _values, result); end
  def _reduce_30(val, _values, result); end
  def _reduce_31(val, _values, result); end
  def _reduce_38(val, _values, result); end
  def _reduce_39(val, _values, result); end
  def _reduce_42(val, _values, result); end
  def _reduce_43(val, _values, result); end
  def _reduce_44(val, _values, result); end
  def _reduce_45(val, _values, result); end
  def _reduce_46(val, _values, result); end
  def _reduce_47(val, _values, result); end
  def _reduce_48(val, _values, result); end
  def _reduce_49(val, _values, result); end
  def _reduce_50(val, _values, result); end
  def _reduce_51(val, _values, result); end
  def _reduce_52(val, _values, result); end
  def _reduce_53(val, _values, result); end
  def _reduce_54(val, _values, result); end
  def _reduce_55(val, _values, result); end
  def _reduce_56(val, _values, result); end
  def _reduce_57(val, _values, result); end
  def _reduce_58(val, _values, result); end
  def _reduce_59(val, _values, result); end
  def _reduce_6(val, _values, result); end
  def _reduce_60(val, _values, result); end
  def _reduce_62(val, _values, result); end
  def _reduce_63(val, _values, result); end
  def _reduce_64(val, _values, result); end
  def _reduce_65(val, _values, result); end
  def _reduce_66(val, _values, result); end
  def _reduce_67(val, _values, result); end
  def _reduce_68(val, _values, result); end
  def _reduce_69(val, _values, result); end
  def _reduce_7(val, _values, result); end
  def _reduce_70(val, _values, result); end
  def _reduce_72(val, _values, result); end
  def _reduce_73(val, _values, result); end
  def _reduce_74(val, _values, result); end
  def _reduce_75(val, _values, result); end
  def _reduce_76(val, _values, result); end
  def _reduce_77(val, _values, result); end
  def _reduce_78(val, _values, result); end
  def _reduce_79(val, _values, result); end
  def _reduce_80(val, _values, result); end
  def _reduce_81(val, _values, result); end
  def _reduce_82(val, _values, result); end
  def _reduce_83(val, _values, result); end
  def _reduce_85(val, _values, result); end
  def _reduce_95(val, _values, result); end
  def _reduce_96(val, _values, result); end
  def _reduce_none(val, _values, result); end
  def buffer; end
  def charpos(scanner); end
  def empty_params_result; end
  def eof_re; end
  def input; end
  def insert_bound_variable(var); end
  def is_bound_variable?(var); end
  def leading_comment(location); end
  def new_token(type, value = T.unsafe(nil)); end
  def next_token; end
  def on_error(token_id, error_value, value_stack); end
  def push_comment(string, location); end
  def reset_variable_scope; end
  def start_merged_variables_scope; end
  def start_new_variables_scope; end

  class << self
    def parse_method_type(input, variables: T.unsafe(nil), eof_re: T.unsafe(nil)); end
    def parse_signature(input, eof_re: T.unsafe(nil)); end
    def parse_type(input, variables: T.unsafe(nil), eof_re: T.unsafe(nil)); end
  end
end

RBS::Parser::ANNOTATION_RE = T.let(T.unsafe(nil), Regexp)

RBS::Parser::Annotation = RBS::AST::Annotation

RBS::Parser::DBL_QUOTE_STR_ESCAPE_SEQUENCES_RE = T.let(T.unsafe(nil), Regexp)

RBS::Parser::Declarations = RBS::AST::Declarations

RBS::Parser::KEYWORDS = T.let(T.unsafe(nil), Hash)

RBS::Parser::KEYWORDS_RE = T.let(T.unsafe(nil), Regexp)

RBS::Parser::Members = RBS::AST::Members

RBS::Parser::MethodType = RBS::MethodType

RBS::Parser::Namespace = RBS::Namespace

RBS::Parser::PUNCTS = T.let(T.unsafe(nil), Hash)

RBS::Parser::PUNCTS_RE = T.let(T.unsafe(nil), Regexp)

RBS::Parser::Racc_arg = T.let(T.unsafe(nil), Array)

RBS::Parser::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

RBS::Parser::TypeName = RBS::TypeName

RBS::Parser::Types = RBS::Types

module RBS::Prototype
end

class RBS::Prototype::RB
  def initialize; end

  def any_node?(node, nodes: T.unsafe(nil), &block); end
  def block_from_body(node); end
  def const_to_name(node, context: T.unsafe(nil)); end
  def current_accessibility(decls, index = T.unsafe(nil)); end
  def decls; end
  def each_child(node, &block); end
  def each_node(nodes); end
  def find_def_index_by_name(decls, name); end
  def function_return_type_from_body(node); end
  def function_type_from_body(node); end
  def is_accessibility?(decl); end
  def keyword_hash?(node); end
  def literal_to_symbol(node); end
  def literal_to_type(node); end
  def node_type(node, default: T.unsafe(nil)); end
  def parse(string); end
  def private; end
  def process(node, decls:, comments:, context:); end
  def process_children(node, decls:, comments:, context:); end
  def public; end
  def range_element_type(types); end
  def remove_unnecessary_accessibility_methods!(decls); end
  def source_decls; end
  def toplevel_members; end
  def types_to_union_type(types); end
  def untyped; end
end

class RBS::Prototype::RB::Context < ::Struct
  def attribute_kind; end
  def method_kind; end
  def module_function; end
  def module_function=(_); end
  def namespace; end
  def namespace=(_); end
  def singleton; end
  def singleton=(_); end

  class << self
    def [](*_arg0); end
    def initial(namespace: T.unsafe(nil)); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::Prototype::RBI
  def initialize; end

  def call_node?(node, name:, receiver: T.unsafe(nil), args: T.unsafe(nil)); end
  def const_to_name(node); end
  def current_module; end
  def current_namespace; end
  def decls; end
  def each_arg(array, &block); end
  def each_child(node); end
  def join_comments(nodes, comments); end
  def last_sig; end
  def method_type(args_node, type_node, variables:); end
  def modules; end
  def nested_name(name); end
  def node_to_hash(node); end
  def parse(string); end
  def parse_params(args_node, args, method_type, variables:); end
  def pop_sig; end
  def proc_type?(type_node); end
  def process(node, comments:, outer: T.unsafe(nil)); end
  def push_class(name, super_class, comment:); end
  def push_module(name, comment:); end
  def push_sig(node); end
  def type_of(type_node, variables:); end
  def type_of0(type_node, variables:); end
end

class RBS::Prototype::Runtime
  def initialize(patterns:, env:, merge:, owners_included: T.unsafe(nil)); end

  def builder; end
  def const_name(const); end
  def decls; end
  def each_included_module(type_name, mod); end
  def env; end
  def generate_class(mod); end
  def generate_constants(mod); end
  def generate_methods(mod, module_name, members); end
  def generate_module(mod); end
  def merge; end
  def merge_rbs(module_name, members, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end
  def method_type(method); end
  def owners_included; end
  def parse(file); end
  def patterns; end
  def target?(const); end
  def target_method?(mod, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end
  def to_type_name(name); end
  def type_args(type_name); end
end

class RBS::RecursiveAliasDefinitionError < ::StandardError
  def initialize(type:, defs:); end

  def defs; end
  def location; end
  def type; end
end

class RBS::RecursiveAncestorError < ::StandardError
  def initialize(ancestors:, location:); end

  def ancestors; end
  def location; end

  class << self
    def check!(self_ancestor, ancestors:, location:); end
  end
end

class RBS::Repository
  def initialize(no_stdlib: T.unsafe(nil)); end

  def add(dir); end
  def dirs; end
  def gems; end
  def lookup(gem, version); end
  def lookup_path(gem, version); end

  class << self
    def default; end
  end
end

RBS::Repository::DEFAULT_STDLIB_ROOT = T.let(T.unsafe(nil), Pathname)

class RBS::Repository::GemRBS
  def initialize(name:); end

  def empty?; end
  def find_best_version(version); end
  def latest_version; end
  def load!; end
  def name; end
  def oldest_version; end
  def paths; end
  def version_names; end
  def versions; end
end

class RBS::Repository::VersionPath < ::Struct
  def gem; end
  def gem=(_); end
  def path; end
  def path=(_); end
  def version; end
  def version=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class RBS::Substitution
  def initialize; end

  def add(from:, to:); end
  def apply(ty); end
  def empty?; end
  def instance_type; end
  def instance_type=(_arg0); end
  def mapping; end
  def without(*vars); end

  class << self
    def build(variables, types, instance_type: T.unsafe(nil), &block); end
  end
end

class RBS::SuperclassMismatchError < ::StandardError
  def initialize(name:, entry:); end

  def entry; end
  def name; end
end

class RBS::TypeName
  def initialize(namespace:, name:); end

  def ==(other); end
  def absolute!; end
  def absolute?; end
  def alias?; end
  def class?; end
  def eql?(other); end
  def hash; end
  def interface?; end
  def kind; end
  def name; end
  def namespace; end
  def relative!; end
  def to_json(*a); end
  def to_namespace; end
  def to_s; end
  def with_prefix(namespace); end
end

class RBS::TypeNameResolver
  def initialize; end

  def add_names(names); end
  def all_names; end
  def cache; end
  def has_name?(full_name); end
  def resolve(type_name, context:); end
  def try_cache(query); end

  class << self
    def from_env(env); end
  end
end

class RBS::TypeNameResolver::Query < ::Struct
  def context; end
  def context=(_); end
  def type_name; end
  def type_name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module RBS::Types
end

class RBS::Types::Alias
  include(::RBS::Types::NoFreeVariables)
  include(::RBS::Types::NoSubst)
  include(::RBS::Types::EmptyEachType)

  def initialize(name:, location:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def location; end
  def map_type_name; end
  def name; end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
end

module RBS::Types::Application
  def ==(other); end
  def args; end
  def each_type(&block); end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def name; end
  def to_s(level = T.unsafe(nil)); end
end

module RBS::Types::Bases
end

class RBS::Types::Bases::Any < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Base
  include(::RBS::Types::NoFreeVariables)
  include(::RBS::Types::NoSubst)
  include(::RBS::Types::EmptyEachType)
  include(::RBS::Types::NoTypeName)

  def initialize(location:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def location; end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
end

class RBS::Types::Bases::Bool < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Bottom < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Class < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Instance < ::RBS::Types::Bases::Base
  def sub(s); end
end

class RBS::Types::Bases::Nil < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Self < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Top < ::RBS::Types::Bases::Base
end

class RBS::Types::Bases::Void < ::RBS::Types::Bases::Base
end

class RBS::Types::Block
  def initialize(type:, required:); end

  def ==(other); end
  def map_type(&block); end
  def required; end
  def sub(s); end
  def to_json(*a); end
  def type; end
end

class RBS::Types::ClassInstance
  include(::RBS::Types::Application)

  def initialize(name:, args:, location:); end

  def location; end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
end

class RBS::Types::ClassSingleton
  include(::RBS::Types::NoFreeVariables)
  include(::RBS::Types::NoSubst)
  include(::RBS::Types::EmptyEachType)

  def initialize(name:, location:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def location; end
  def map_type_name; end
  def name; end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
end

module RBS::Types::EmptyEachType
  def each_type; end
end

class RBS::Types::Function
  def initialize(required_positionals:, optional_positionals:, rest_positionals:, trailing_positionals:, required_keywords:, optional_keywords:, rest_keywords:, return_type:); end

  def ==(other); end
  def drop_head; end
  def drop_tail; end
  def each_param(&block); end
  def each_type; end
  def empty?; end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def has_keyword?; end
  def hash; end
  def map_type(&block); end
  def map_type_name(&block); end
  def optional_keywords; end
  def optional_positionals; end
  def param_to_s; end
  def required_keywords; end
  def required_positionals; end
  def rest_keywords; end
  def rest_positionals; end
  def return_to_s; end
  def return_type; end
  def sub(s); end
  def to_json(*a); end
  def trailing_positionals; end
  def update(required_positionals: T.unsafe(nil), optional_positionals: T.unsafe(nil), rest_positionals: T.unsafe(nil), trailing_positionals: T.unsafe(nil), required_keywords: T.unsafe(nil), optional_keywords: T.unsafe(nil), rest_keywords: T.unsafe(nil), return_type: T.unsafe(nil)); end
  def with_return_type(type); end

  class << self
    def empty(return_type); end
  end
end

class RBS::Types::Function::Param
  def initialize(type:, name:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def map_type(&block); end
  def name; end
  def to_json(*a); end
  def to_s; end
  def type; end
end

class RBS::Types::Interface
  include(::RBS::Types::Application)

  def initialize(name:, args:, location:); end

  def location; end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
end

class RBS::Types::Intersection
  def initialize(types:, location:); end

  def ==(other); end
  def each_type(&block); end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def map_type(&block); end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
  def types; end
end

class RBS::Types::Literal
  include(::RBS::Types::NoFreeVariables)
  include(::RBS::Types::NoSubst)
  include(::RBS::Types::EmptyEachType)
  include(::RBS::Types::NoTypeName)

  def initialize(literal:, location:); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def literal; end
  def location; end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
end

module RBS::Types::NoFreeVariables
  def free_variables(set = T.unsafe(nil)); end
end

module RBS::Types::NoSubst
  def sub(s); end
end

module RBS::Types::NoTypeName
  def map_type_name; end
end

class RBS::Types::Optional
  def initialize(type:, location:); end

  def ==(other); end
  def each_type; end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
  def type; end
end

class RBS::Types::Proc
  def initialize(location:, type:, block:); end

  def ==(other); end
  def block; end
  def each_type(&block); end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
  def type; end
end

class RBS::Types::Record
  def initialize(fields:, location:); end

  def ==(other); end
  def each_type(&block); end
  def eql?(other); end
  def fields; end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
end

class RBS::Types::Tuple
  def initialize(types:, location:); end

  def ==(other); end
  def each_type(&block); end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
  def types; end
end

class RBS::Types::Union
  def initialize(types:, location:); end

  def ==(other); end
  def each_type(&block); end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def map_type(&block); end
  def map_type_name(&block); end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end
  def types; end
end

class RBS::Types::Variable
  include(::RBS::Types::NoTypeName)
  include(::RBS::Types::EmptyEachType)

  def initialize(name:, location:); end

  def ==(other); end
  def eql?(other); end
  def free_variables(set = T.unsafe(nil)); end
  def hash; end
  def location; end
  def name; end
  def sub(s); end
  def to_json(*a); end
  def to_s(level = T.unsafe(nil)); end

  class << self
    def build(v); end
    def fresh(v = T.unsafe(nil)); end
  end
end

class RBS::UnknownMethodAliasError < ::StandardError
  def initialize(original_name:, aliased_name:, location:); end

  def aliased_name; end
  def location; end
  def original_name; end
end

RBS::VERSION = T.let(T.unsafe(nil), String)

class RBS::Validator
  def initialize(env:, resolver:); end

  def absolute_type(type, context:); end
  def env; end
  def resolver; end
  def validate_type(type, context:); end
end

class RBS::VarianceCalculator
  def initialize(builder:); end

  def builder; end
  def env; end
  def in_inherit(name:, args:, variables:); end
  def in_method_type(method_type:, variables:); end
  def type(type, result:, context:); end
end

class RBS::VarianceCalculator::Result
  def initialize(variables:); end

  def compatible?(var, with_annotation:); end
  def contravariant(x); end
  def covariant(x); end
  def each(&block); end
  def include?(name); end
  def invariant(x); end
  def result; end
end

class RBS::Vendorer
  def initialize(vendor_dir:, loader:); end

  def clean!; end
  def copy!; end
  def ensure_dir; end
  def loader; end
  def vendor_dir; end
end

class RBS::Writer
  def initialize(out:); end

  def attribute(kind, attr); end
  def indent(size = T.unsafe(nil)); end
  def indentation; end
  def method_name(name); end
  def name_and_args(name, args); end
  def name_and_params(name, params); end
  def out; end
  def prefix; end
  def preserve_empty_line(prev, decl); end
  def puts(string = T.unsafe(nil)); end
  def write(decls); end
  def write_annotation(annotations); end
  def write_comment(comment); end
  def write_decl(decl); end
  def write_def(member); end
  def write_member(member); end
end
