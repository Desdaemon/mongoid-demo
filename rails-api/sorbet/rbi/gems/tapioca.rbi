# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/tapioca/all/tapioca.rbi
#
# tapioca-0.4.10

module Tapioca
  def self.silence_warnings(&blk); end
end
class Tapioca::Loader
  def eager_load_rails_app(*args, &blk); end
  def gemfile(*args, &blk); end
  def initialize(*args, &blk); end
  def load_bundle(*args, &blk); end
  def load_rails(*args, &blk); end
  def load_rails_engines(*args, &blk); end
  def load_rake(*args, &blk); end
  def rails_engines(*args, &blk); end
  def require_bundle(*args, &blk); end
  def require_helper(*args, &blk); end
  def safe_require(*args, &blk); end
  def silence_deprecations(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Tapioca::ConstantLocator
  def files_for(klass); end
  def self.files_for(klass); end
end
class Tapioca::Config < T::Struct
  def __t_props_generated_deserialize(*args); end
  def __t_props_generated_serialize(*args); end
  def exclude; end
  def generate_command; end
  def generators; end
  def outdir; end
  def outpath(*args, &blk); end
  def postrequire; end
  def prerequire; end
  def self.inherited(s); end
  def self.new(*arg0); end
  def todos_path; end
  def typed_overrides; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class Tapioca::ConfigBuilder
  def self.config_options(*args, &blk); end
  def self.default_command(&blk); end
  def self.default_options(*args, &blk); end
  def self.from_options(*args, &blk); end
  def self.merge_options(*args, &blk); end
end
class Tapioca::Generator < Thor::Shell::Color
  def add(*args, &blk); end
  def added_rbis(*args, &blk); end
  def build_dsl(*args, &blk); end
  def build_gem_rbis(*args, &blk); end
  def build_requires(*args, &blk); end
  def build_todos(*args, &blk); end
  def bundle(*args, &blk); end
  def compile_dsl_rbi(*args, &blk); end
  def compile_gem_rbi(*args, &blk); end
  def compiler(*args, &blk); end
  def config(*args, &blk); end
  def constantize(*args, &blk); end
  def existing_rbi(*args, &blk); end
  def existing_rbis(*args, &blk); end
  def expected_rbi(*args, &blk); end
  def expected_rbis(*args, &blk); end
  def explain_failed_require(*args, &blk); end
  def gem_rbi_exists?(*args, &blk); end
  def gem_rbi_filename(*args, &blk); end
  def gems_to_generate(*args, &blk); end
  def initialize(*args, &blk); end
  def load_application(*args, &blk); end
  def load_dsl_generators(*args, &blk); end
  def loader(*args, &blk); end
  def move(*args, &blk); end
  def perform_additions(*args, &blk); end
  def perform_removals(*args, &blk); end
  def rbi_header(*args, &blk); end
  def remove(*args, &blk); end
  def removed_rbis(*args, &blk); end
  def require_gem_file(*args, &blk); end
  def say_error(*args, &blk); end
  def sync_rbis_with_gemfile(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Tapioca::Cli < Thor
  def __print_version; end
  def dsl(*constants); end
  def generate(*gems); end
  def generator; end
  def init; end
  def require; end
  def self.exit_on_failure?; end
  def sync; end
  def todo; end
  extend Thor::Actions::ClassMethods
  include Thor::Actions
end
class Tapioca::Gemfile
  def definition(*args, &blk); end
  def dependencies(*args, &blk); end
  def dir(*args, &blk); end
  def gem(*args, &blk); end
  def gemfile(*args, &blk); end
  def groups(*args, &blk); end
  def initialize(*args, &blk); end
  def lockfile; end
  def require(*args, &blk); end
  def runtime(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Tapioca::Gemfile::Gem
  def contains_path?(*args, &blk); end
  def files(*args, &blk); end
  def full_gem_path(*args, &blk); end
  def gem_ignored?(*args, &blk); end
  def gem_in_app_dir?(*args, &blk); end
  def gem_in_bundle_path?(*args, &blk); end
  def has_parent_gemspec?(*args, &blk); end
  def ignore?(*args, &blk); end
  def initialize(*args, &blk); end
  def name(*args, &blk); end
  def rbi_file_name(*args, &blk); end
  def to_realpath(*args, &blk); end
  def version; end
  def version_string(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Tapioca::Compilers
end
module Tapioca::Compilers::Sorbet
  def self.run(*args, &blk); end
  def self.sorbet_path(*args, &blk); end
end
class Tapioca::Compilers::RequiresCompiler
  def collect_files(*args, &blk); end
  def collect_requires(*args, &blk); end
  def compile(*args, &blk); end
  def file_ignored_by_sorbet?(*args, &blk); end
  def initialize(*args, &blk); end
  def name_in_project?(*args, &blk); end
  def path_parts(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Tapioca::Compilers::SymbolTableCompiler
  def compile(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Tapioca::Compilers::SymbolTable
end
class Tapioca::Compilers::SymbolTable::SymbolGenerator
  def add_to_alias_namespace(*args, &blk); end
  def alias_namespaced?(*args, &blk); end
  def are_equal?(*args, &blk); end
  def class_of(*args, &blk); end
  def compile(*args, &blk); end
  def compile_alias(*args, &blk); end
  def compile_body(*args, &blk); end
  def compile_constant(*args, &blk); end
  def compile_directly_owned_methods(*args, &blk); end
  def compile_method(*args, &blk); end
  def compile_methods(*args, &blk); end
  def compile_mixes_in_class_methods(*args, &blk); end
  def compile_mixins(*args, &blk); end
  def compile_module(*args, &blk); end
  def compile_module_helpers(*args, &blk); end
  def compile_object(*args, &blk); end
  def compile_props(*args, &blk); end
  def compile_signature(*args, &blk); end
  def compile_subconstants(*args, &blk); end
  def compile_superclass(*args, &blk); end
  def constants_of(*args, &blk); end
  def defined_in_gem?(*args, &blk); end
  def engine_symbols(*args, &blk); end
  def gem; end
  def generate(*args, &blk); end
  def generate_from_symbol(*args, &blk); end
  def get_file_candidates(*args, &blk); end
  def indent; end
  def indented(*args, &blk); end
  def initialize(*args, &blk); end
  def initialize_method_for(constant); end
  def mark_seen(*args, &blk); end
  def method_in_gem?(*args, &blk); end
  def method_names_by_visibility(*args, &blk); end
  def name_of(*args, &blk); end
  def name_of_proxy_target(*args, &blk); end
  def parent_declares_constant?(name); end
  def public_module?(*args, &blk); end
  def qualified_name_of(*args, &blk); end
  def raw_name_of(*args, &blk); end
  def resolve_constant(*args, &blk); end
  def seen?(*args, &blk); end
  def signature_of(*args, &blk); end
  def singleton_class_of(*args, &blk); end
  def struct_method?(*args, &blk); end
  def superclass_of(*args, &blk); end
  def symbol_ignored?(*args, &blk); end
  def symbols(*args, &blk); end
  def type_of(*args, &blk); end
  def valid_method_name?(*args, &blk); end
  def with_indentation(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Tapioca::Compilers::SymbolTable::SymbolLoader
  def self.ignore_symbol?(symbol); end
  def self.ignored_symbols; end
  def self.list_from_paths(*args, &blk); end
  def self.load_symbols(*args, &blk); end
  def self.symbol_table_json_from(input, table_type: nil); end
end
class Tapioca::Compilers::SymbolTable::SymbolLoader::SymbolTableParser
  def self.parse(object, parents = nil); end
end
class Tapioca::Compilers::TodosCompiler
  def compile(*args, &blk); end
  def list_todos(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Tapioca::Compilers::Dsl
end
class Tapioca::Compilers::Dsl::Base
  def compile_method_parameters_to_parlour(*args, &blk); end
  def compile_method_return_type_to_parlour(*args, &blk); end
  def create_method(*args, &blk); end
  def create_method_from_def(*args, &blk); end
  def decorate(*args, &blk); end
  def gather_constants(*args, &blk); end
  def handles?(*args, &blk); end
  def initialize(*args, &blk); end
  def parameters_types_from_signature(*args, &blk); end
  def processable_constants(*args, &blk); end
  def valid_method_name?(*args, &blk); end
  extend T::Helpers
  extend T::InterfaceWrapper::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Tapioca::Compilers::DslCompiler
  def error_handler(*args, &blk); end
  def gather_constants(*args, &blk); end
  def gather_generators(*args, &blk); end
  def generator_filter(*args, &blk); end
  def generators(*args, &blk); end
  def initialize(*args, &blk); end
  def rbi_for_constant(*args, &blk); end
  def report_error(*args, &blk); end
  def requested_constants(*args, &blk); end
  def resolve_conflicts(*args, &blk); end
  def run(*args, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Tapioca::Error < StandardError
end
